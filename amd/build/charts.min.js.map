{"version":3,"file":"charts.min.js","sources":["../src/charts.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module powering Progress Analytics block charts.\n *\n * @module block_progressanalytics/charts\n */\n\ndefine(['core/ajax', 'core/chartjs', 'core/str'], function(Ajax, Chart, Str) {\n    'use strict';\n\n    const stringConfig = [\n        {id: 'progressTooltipCompleted', key: 'progress_tooltip_completed'},\n        {id: 'progressTooltipRemaining', key: 'progress_tooltip_remaining'},\n        {id: 'progressSummary', key: 'progress_summary'},\n        {id: 'resultsEmptyMessage', key: 'results_empty_message'},\n        {id: 'resultsDatasetLabel', key: 'results_dataset_label'},\n        {id: 'resultsTooltip', key: 'results_tooltip'},\n        {id: 'resultsSummary', key: 'results_summary'},\n        {id: 'comparisonPending', key: 'js_comparison_pending'},\n        {id: 'comparisonMyAverage', key: 'js_myaverage'},\n        {id: 'comparisonCourseAverage', key: 'js_courseaverage'},\n        {id: 'comparisonTooltip', key: 'comparison_tooltip'},\n        {id: 'comparisonSummaryWithPercentile', key: 'comparison_summary_with_percentile'},\n        {id: 'comparisonSummaryWithoutPercentile', key: 'comparison_summary_without_percentile'}\n    ];\n\n    const Charts = {\n        progressChart: null,\n        resultsChart: null,\n        comparisonChart: null,\n        strings: null,\n\n        /**\n         * Initialize the charts.\n         * @param {number} courseid Course identifier\n         */\n        init: function(courseid) {\n            const fallback = this.getFallbackStrings();\n            const requests = stringConfig.map(entry => ({\n                key: entry.key,\n                component: 'block_progressanalytics'\n            }));\n\n            Str.get_strings(requests).then(values => {\n                this.strings = {};\n                stringConfig.forEach((entry, index) => {\n                    const value = values[index];\n                    this.strings[entry.id] = value || fallback[entry.id];\n                });\n                this.loadData(courseid);\n            }).catch(() => {\n                this.strings = fallback;\n                this.loadData(courseid);\n            });\n        },\n\n        /**\n         * Load data from the server.\n         * @param {number} courseid Course identifier\n         */\n        loadData: function(courseid) {\n            Ajax.call([{\n                methodname: 'block_progressanalytics_get_course_quiz_metrics',\n                args: { courseid: courseid }\n            }])[0].then(data => {\n                this.hideLoading();\n\n                if (data.progress.total === 0) {\n                    this.showNoQuizzes();\n                    return;\n                }\n\n                this.showContent();\n                this.renderCharts(data);\n            }).catch(() => {\n                this.showError();\n            });\n        },\n\n        /**\n         * Render all charts using the retrieved data.\n         * @param {Object} data Dataset returned by the webservice\n         */\n        renderCharts: function(data) {\n            this.renderProgressChart(data.progress);\n            this.renderResultsChart(data.results);\n            this.renderComparisonChart(data.comparison);\n        },\n\n        /**\n         * Render the progress doughnut chart.\n         * @param {Object} progress Progress data structure\n         */\n        renderProgressChart: function(progress) {\n            const ctx = document.getElementById('progress-chart');\n            if (!ctx) {\n                return;\n            }\n\n            const completed = progress.completed;\n            const remaining = progress.total - completed;\n            const tooltipValues = {\n                completed: this.formatString(this.strings.progressTooltipCompleted, {count: completed}),\n                remaining: this.formatString(this.strings.progressTooltipRemaining, {count: remaining})\n            };\n\n            this.progressChart = new Chart(ctx, {\n                type: 'doughnut',\n                data: {\n                    datasets: [{\n                        data: [completed, remaining],\n                        backgroundColor: ['#28a745', '#e9ecef'],\n                        borderColor: ['#1e7e34', '#dee2e6'],\n                        borderWidth: 2\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return context.dataIndex === 0 ? tooltipValues.completed : tooltipValues.remaining;\n                                }\n                            }\n                        }\n                    },\n                    elements: {\n                        center: {\n                            text: progress.percentage.toFixed(1) + '%',\n                            color: '#495057',\n                            fontStyle: 'bold',\n                            fontSize: 24\n                        }\n                    }\n                },\n                plugins: [{\n                    beforeDraw: function(chart) {\n                        if (chart.config.options.elements.center) {\n                            const context2d = chart.ctx;\n                            const centerConfig = chart.config.options.elements.center;\n                            const fontStyle = centerConfig.fontStyle || 'Arial';\n                            const fontSize = centerConfig.fontSize || 24;\n\n                            context2d.restore();\n                            context2d.font = fontSize + 'px ' + fontStyle;\n                            context2d.textBaseline = 'middle';\n                            context2d.fillStyle = centerConfig.color || '#000';\n\n                            const centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);\n                            const centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);\n                            context2d.textAlign = 'center';\n                            context2d.fillText(centerConfig.text, centerX, centerY);\n                            context2d.save();\n                        }\n                    }\n                }]\n            });\n\n            const description = document.getElementById('progress-description');\n            if (description) {\n                description.textContent = this.formatString(this.strings.progressSummary, {\n                    completed: completed,\n                    total: progress.total\n                });\n            }\n        },\n\n        /**\n         * Render the results line chart.\n         * @param {Array} results Array of quiz results\n         */\n        renderResultsChart: function(results) {\n            const ctx = document.getElementById('results-chart');\n            if (!ctx) {\n                return;\n            }\n\n            if (results.length === 0) {\n                ctx.parentElement.innerHTML = '<div class=\"text-center text-muted p-3\">' +\n                    this.strings.resultsEmptyMessage + '</div>';\n                const emptyDescription = document.getElementById('results-description');\n                if (emptyDescription) {\n                    emptyDescription.textContent = '';\n                }\n                return;\n            }\n\n            const labels = results.map(result => result.name.length > 15 ? result.name.substring(0, 15) + '...' : result.name);\n            const grades = results.map(result => result.grade);\n            const self = this;\n            const tooltipTemplate = this.strings.resultsTooltip;\n\n            this.resultsChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: this.strings.resultsDatasetLabel,\n                        data: grades,\n                        borderColor: '#007bff',\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        borderWidth: 2,\n                        fill: true,\n                        tension: 0.1,\n                        pointBackgroundColor: '#007bff',\n                        pointBorderColor: '#fff',\n                        pointBorderWidth: 2,\n                        pointRadius: 5\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                title: function(context) {\n                                    return results[context[0].dataIndex].name;\n                                },\n                                label: function(context) {\n                                    return self.formatString(tooltipTemplate, {\n                                        grade: context.parsed.y.toFixed(1)\n                                    });\n                                }\n                            }\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            max: 100,\n                            ticks: {\n                                callback: function(value) {\n                                    return value + '%';\n                                }\n                            }\n                        },\n                        x: {\n                            ticks: {\n                                maxRotation: 45\n                            }\n                        }\n                    }\n                }\n            });\n\n            const description = document.getElementById('results-description');\n            if (description) {\n                const average = (grades.reduce((a, b) => a + b, 0) / grades.length).toFixed(1);\n                description.textContent = this.formatString(this.strings.resultsSummary, {\n                    average: average,\n                    count: results.length\n                });\n            }\n        },\n\n        /**\n         * Render the comparison bar chart.\n         * @param {Object} comparison Comparison metrics\n         */\n        renderComparisonChart: function(comparison) {\n            const ctx = document.getElementById('comparison-chart');\n            if (!ctx) {\n                return;\n            }\n\n            if (!comparison.hasComparison || comparison.courseMean === 0) {\n                ctx.parentElement.innerHTML = '<div class=\"text-center text-muted p-3\">' +\n                    this.strings.comparisonPending + '</div>';\n                const emptyDescription = document.getElementById('comparison-description');\n                if (emptyDescription) {\n                    emptyDescription.textContent = '';\n                }\n                return;\n            }\n\n            const data = {\n                labels: [this.strings.comparisonMyAverage, this.strings.comparisonCourseAverage],\n                datasets: [{\n                    data: [comparison.studentMean, comparison.courseMean],\n                    backgroundColor: ['#007bff', '#6c757d'],\n                    borderColor: ['#0056b3', '#5a6268'],\n                    borderWidth: 1\n                }]\n            };\n            const self = this;\n\n            this.comparisonChart = new Chart(ctx, {\n                type: 'bar',\n                data: data,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                        legend: {\n                            display: false\n                        },\n                        tooltip: {\n                            callbacks: {\n                                label: function(context) {\n                                    return self.formatString(self.strings.comparisonTooltip, {\n                                        label: context.label,\n                                        value: context.parsed.y.toFixed(1)\n                                    });\n                                }\n                            }\n                        }\n                    },\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            max: 100,\n                            ticks: {\n                                callback: function(value) {\n                                    return value + '%';\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n\n            const description = document.getElementById('comparison-description');\n            if (description) {\n                const courseMean = comparison.courseMean.toFixed(1);\n                if (comparison.hasComparison && comparison.studentMean > 0) {\n                    description.textContent = this.formatString(\n                        this.strings.comparisonSummaryWithPercentile,\n                        {\n                            course: courseMean,\n                            percentile: comparison.percentile\n                        }\n                    );\n                } else {\n                    description.textContent = this.formatString(\n                        this.strings.comparisonSummaryWithoutPercentile,\n                        {\n                            course: courseMean\n                        }\n                    );\n                }\n            }\n        },\n\n        /**\n         * Show loading state.\n         */\n        showLoading: function() {\n            document.getElementById('analytics-loading').classList.remove('d-none');\n            document.getElementById('analytics-error').classList.add('d-none');\n            document.getElementById('analytics-noquizzes').classList.add('d-none');\n            document.getElementById('analytics-content').classList.add('d-none');\n        },\n\n        /**\n         * Hide loading state.\n         */\n        hideLoading: function() {\n            document.getElementById('analytics-loading').classList.add('d-none');\n        },\n\n        /**\n         * Show error state.\n         */\n        showError: function() {\n            this.hideLoading();\n            document.getElementById('analytics-error').classList.remove('d-none');\n        },\n\n        /**\n         * Show no quizzes state.\n         */\n        showNoQuizzes: function() {\n            this.hideLoading();\n            document.getElementById('analytics-noquizzes').classList.remove('d-none');\n        },\n\n        /**\n         * Show main content.\n         */\n        showContent: function() {\n            this.hideLoading();\n            document.getElementById('analytics-content').classList.remove('d-none');\n        },\n\n        /**\n         * Provide fallback strings in cases where the language API fails.\n         * @return {Object} Fallback translations\n         */\n        getFallbackStrings: function() {\n            return {\n                progressTooltipCompleted: 'Completed: {count}',\n                progressTooltipRemaining: 'Remaining: {count}',\n                progressSummary: '{completed} of {total} activities completed',\n                resultsEmptyMessage: 'No quiz results available yet',\n                resultsDatasetLabel: 'Grade',\n                resultsTooltip: 'Grade: {grade}%',\n                resultsSummary: 'Personal average: {average}% ({count} quizzes)',\n                comparisonPending: 'Comparison data will appear when more students complete quizzes',\n                comparisonMyAverage: 'My average',\n                comparisonCourseAverage: 'Course average',\n                comparisonTooltip: '{label}: {value}%',\n                comparisonSummaryWithPercentile: 'Course average: {course}% • Your percentile: {percentile}%',\n                comparisonSummaryWithoutPercentile: 'Course average: {course}%'\n            };\n        },\n\n        /**\n         * Replace {placeholder} tokens with contextual data.\n         * @param {String} template Template string with placeholders\n         * @param {Object} data Replacement map\n         * @return {String} The formatted string\n         */\n        formatString: function(template, data) {\n            if (!template) {\n                return '';\n            }\n\n            return template.replace(/\\{(\\w+)\\}/g, function(match, key) {\n                if (Object.prototype.hasOwnProperty.call(data, key)) {\n                    return data[key];\n                }\n                return match;\n            });\n        }\n    };\n\n    return Charts;\n});\n"],"names":["define","Ajax","Chart","Str","stringConfig","id","key","progressChart","resultsChart","comparisonChart","strings","init","courseid","fallback","this","getFallbackStrings","requests","map","entry","component","get_strings","then","values","forEach","index","value","loadData","catch","call","methodname","args","data","hideLoading","progress","total","showContent","renderCharts","showNoQuizzes","showError","renderProgressChart","renderResultsChart","results","renderComparisonChart","comparison","ctx","document","getElementById","completed","remaining","tooltipValues","formatString","progressTooltipCompleted","count","progressTooltipRemaining","type","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","label","context","dataIndex","elements","center","text","percentage","toFixed","color","fontStyle","fontSize","beforeDraw","chart","config","context2d","centerConfig","restore","font","textBaseline","fillStyle","centerX","chartArea","left","right","centerY","top","bottom","textAlign","fillText","save","description","textContent","progressSummary","length","parentElement","innerHTML","resultsEmptyMessage","emptyDescription","labels","result","name","substring","grades","grade","self","tooltipTemplate","resultsTooltip","resultsDatasetLabel","fill","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","title","parsed","y","scales","beginAtZero","max","ticks","callback","x","maxRotation","average","reduce","a","b","resultsSummary","hasComparison","courseMean","comparisonPending","comparisonMyAverage","comparisonCourseAverage","studentMean","comparisonTooltip","comparisonSummaryWithPercentile","course","percentile","comparisonSummaryWithoutPercentile","showLoading","classList","remove","add","template","replace","match","Object","prototype","hasOwnProperty"],"mappings":"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"}